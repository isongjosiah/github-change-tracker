// Code generated by counterfeiter. DO NOT EDIT.
package repositoriesfakes

import (
	"context"
	"heimdall/internal/dal/model"
	"heimdall/internal/dal/repositories"
	"sync"
)

type FakeIGitRepository struct {
	AddStub        func(context.Context, model.Repository) (model.Repository, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 context.Context
		arg2 model.Repository
	}
	addReturns struct {
		result1 model.Repository
		result2 error
	}
	addReturnsOnCall map[int]struct {
		result1 model.Repository
		result2 error
	}
	CommitsStub        func(context.Context, string, string, int) ([]model.Commit, model.PaginationData, error)
	commitsMutex       sync.RWMutex
	commitsArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}
	commitsReturns struct {
		result1 []model.Commit
		result2 model.PaginationData
		result3 error
	}
	commitsReturnsOnCall map[int]struct {
		result1 []model.Commit
		result2 model.PaginationData
		result3 error
	}
	GetByURLStub        func(context.Context, string, bool, ...string) (model.Repository, error)
	getByURLMutex       sync.RWMutex
	getByURLArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 bool
		arg4 []string
	}
	getByURLReturns struct {
		result1 model.Repository
		result2 error
	}
	getByURLReturnsOnCall map[int]struct {
		result1 model.Repository
		result2 error
	}
	ListStub        func(context.Context, int, int, ...string) ([]model.Repository, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
	}
	listReturns struct {
		result1 []model.Repository
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []model.Repository
		result2 error
	}
	UpdateStub        func(context.Context, int, map[string]any) error
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 map[string]any
	}
	updateReturns struct {
		result1 error
	}
	updateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIGitRepository) Add(arg1 context.Context, arg2 model.Repository) (model.Repository, error) {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 context.Context
		arg2 model.Repository
	}{arg1, arg2})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1, arg2})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIGitRepository) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeIGitRepository) AddCalls(stub func(context.Context, model.Repository) (model.Repository, error)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeIGitRepository) AddArgsForCall(i int) (context.Context, model.Repository) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIGitRepository) AddReturns(result1 model.Repository, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 model.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitRepository) AddReturnsOnCall(i int, result1 model.Repository, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 model.Repository
			result2 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 model.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitRepository) Commits(arg1 context.Context, arg2 string, arg3 string, arg4 int) ([]model.Commit, model.PaginationData, error) {
	fake.commitsMutex.Lock()
	ret, specificReturn := fake.commitsReturnsOnCall[len(fake.commitsArgsForCall)]
	fake.commitsArgsForCall = append(fake.commitsArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.CommitsStub
	fakeReturns := fake.commitsReturns
	fake.recordInvocation("Commits", []interface{}{arg1, arg2, arg3, arg4})
	fake.commitsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeIGitRepository) CommitsCallCount() int {
	fake.commitsMutex.RLock()
	defer fake.commitsMutex.RUnlock()
	return len(fake.commitsArgsForCall)
}

func (fake *FakeIGitRepository) CommitsCalls(stub func(context.Context, string, string, int) ([]model.Commit, model.PaginationData, error)) {
	fake.commitsMutex.Lock()
	defer fake.commitsMutex.Unlock()
	fake.CommitsStub = stub
}

func (fake *FakeIGitRepository) CommitsArgsForCall(i int) (context.Context, string, string, int) {
	fake.commitsMutex.RLock()
	defer fake.commitsMutex.RUnlock()
	argsForCall := fake.commitsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIGitRepository) CommitsReturns(result1 []model.Commit, result2 model.PaginationData, result3 error) {
	fake.commitsMutex.Lock()
	defer fake.commitsMutex.Unlock()
	fake.CommitsStub = nil
	fake.commitsReturns = struct {
		result1 []model.Commit
		result2 model.PaginationData
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIGitRepository) CommitsReturnsOnCall(i int, result1 []model.Commit, result2 model.PaginationData, result3 error) {
	fake.commitsMutex.Lock()
	defer fake.commitsMutex.Unlock()
	fake.CommitsStub = nil
	if fake.commitsReturnsOnCall == nil {
		fake.commitsReturnsOnCall = make(map[int]struct {
			result1 []model.Commit
			result2 model.PaginationData
			result3 error
		})
	}
	fake.commitsReturnsOnCall[i] = struct {
		result1 []model.Commit
		result2 model.PaginationData
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIGitRepository) GetByURL(arg1 context.Context, arg2 string, arg3 bool, arg4 ...string) (model.Repository, error) {
	fake.getByURLMutex.Lock()
	ret, specificReturn := fake.getByURLReturnsOnCall[len(fake.getByURLArgsForCall)]
	fake.getByURLArgsForCall = append(fake.getByURLArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 bool
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetByURLStub
	fakeReturns := fake.getByURLReturns
	fake.recordInvocation("GetByURL", []interface{}{arg1, arg2, arg3, arg4})
	fake.getByURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIGitRepository) GetByURLCallCount() int {
	fake.getByURLMutex.RLock()
	defer fake.getByURLMutex.RUnlock()
	return len(fake.getByURLArgsForCall)
}

func (fake *FakeIGitRepository) GetByURLCalls(stub func(context.Context, string, bool, ...string) (model.Repository, error)) {
	fake.getByURLMutex.Lock()
	defer fake.getByURLMutex.Unlock()
	fake.GetByURLStub = stub
}

func (fake *FakeIGitRepository) GetByURLArgsForCall(i int) (context.Context, string, bool, []string) {
	fake.getByURLMutex.RLock()
	defer fake.getByURLMutex.RUnlock()
	argsForCall := fake.getByURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIGitRepository) GetByURLReturns(result1 model.Repository, result2 error) {
	fake.getByURLMutex.Lock()
	defer fake.getByURLMutex.Unlock()
	fake.GetByURLStub = nil
	fake.getByURLReturns = struct {
		result1 model.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitRepository) GetByURLReturnsOnCall(i int, result1 model.Repository, result2 error) {
	fake.getByURLMutex.Lock()
	defer fake.getByURLMutex.Unlock()
	fake.GetByURLStub = nil
	if fake.getByURLReturnsOnCall == nil {
		fake.getByURLReturnsOnCall = make(map[int]struct {
			result1 model.Repository
			result2 error
		})
	}
	fake.getByURLReturnsOnCall[i] = struct {
		result1 model.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitRepository) List(arg1 context.Context, arg2 int, arg3 int, arg4 ...string) ([]model.Repository, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3, arg4})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIGitRepository) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeIGitRepository) ListCalls(stub func(context.Context, int, int, ...string) ([]model.Repository, error)) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeIGitRepository) ListArgsForCall(i int) (context.Context, int, int, []string) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIGitRepository) ListReturns(result1 []model.Repository, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []model.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitRepository) ListReturnsOnCall(i int, result1 []model.Repository, result2 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []model.Repository
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []model.Repository
		result2 error
	}{result1, result2}
}

func (fake *FakeIGitRepository) Update(arg1 context.Context, arg2 int, arg3 map[string]any) error {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 map[string]any
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIGitRepository) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeIGitRepository) UpdateCalls(stub func(context.Context, int, map[string]any) error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeIGitRepository) UpdateArgsForCall(i int) (context.Context, int, map[string]any) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIGitRepository) UpdateReturns(result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIGitRepository) UpdateReturnsOnCall(i int, result1 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIGitRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.commitsMutex.RLock()
	defer fake.commitsMutex.RUnlock()
	fake.getByURLMutex.RLock()
	defer fake.getByURLMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIGitRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.IGitRepository = new(FakeIGitRepository)
