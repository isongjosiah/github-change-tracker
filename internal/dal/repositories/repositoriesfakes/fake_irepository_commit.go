// Code generated by counterfeiter. DO NOT EDIT.
package repositoriesfakes

import (
	"context"
	"heimdall/internal/dal/model"
	"heimdall/internal/dal/repositories"
	"sync"
	"time"
)

type FakeIRepositoryCommit struct {
	AddStub        func(context.Context, []model.Commit) error
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 context.Context
		arg2 []model.Commit
	}
	addReturns struct {
		result1 error
	}
	addReturnsOnCall map[int]struct {
		result1 error
	}
	ListByRepoIDStub        func(context.Context, int, int, int) ([]model.Commit, error)
	listByRepoIDMutex       sync.RWMutex
	listByRepoIDArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 int
	}
	listByRepoIDReturns struct {
		result1 []model.Commit
		result2 error
	}
	listByRepoIDReturnsOnCall map[int]struct {
		result1 []model.Commit
		result2 error
	}
	ResetCommitsFromStub        func(context.Context, int, time.Time) error
	resetCommitsFromMutex       sync.RWMutex
	resetCommitsFromArgsForCall []struct {
		arg1 context.Context
		arg2 int
		arg3 time.Time
	}
	resetCommitsFromReturns struct {
		result1 error
	}
	resetCommitsFromReturnsOnCall map[int]struct {
		result1 error
	}
	TopAuthorsStub        func(context.Context, int) ([]model.TopAuthor, error)
	topAuthorsMutex       sync.RWMutex
	topAuthorsArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	topAuthorsReturns struct {
		result1 []model.TopAuthor
		result2 error
	}
	topAuthorsReturnsOnCall map[int]struct {
		result1 []model.TopAuthor
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIRepositoryCommit) Add(arg1 context.Context, arg2 []model.Commit) error {
	var arg2Copy []model.Commit
	if arg2 != nil {
		arg2Copy = make([]model.Commit, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 context.Context
		arg2 []model.Commit
	}{arg1, arg2Copy})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1, arg2Copy})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIRepositoryCommit) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeIRepositoryCommit) AddCalls(stub func(context.Context, []model.Commit) error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeIRepositoryCommit) AddArgsForCall(i int) (context.Context, []model.Commit) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIRepositoryCommit) AddReturns(result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIRepositoryCommit) AddReturnsOnCall(i int, result1 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIRepositoryCommit) ListByRepoID(arg1 context.Context, arg2 int, arg3 int, arg4 int) ([]model.Commit, error) {
	fake.listByRepoIDMutex.Lock()
	ret, specificReturn := fake.listByRepoIDReturnsOnCall[len(fake.listByRepoIDArgsForCall)]
	fake.listByRepoIDArgsForCall = append(fake.listByRepoIDArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 int
		arg4 int
	}{arg1, arg2, arg3, arg4})
	stub := fake.ListByRepoIDStub
	fakeReturns := fake.listByRepoIDReturns
	fake.recordInvocation("ListByRepoID", []interface{}{arg1, arg2, arg3, arg4})
	fake.listByRepoIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIRepositoryCommit) ListByRepoIDCallCount() int {
	fake.listByRepoIDMutex.RLock()
	defer fake.listByRepoIDMutex.RUnlock()
	return len(fake.listByRepoIDArgsForCall)
}

func (fake *FakeIRepositoryCommit) ListByRepoIDCalls(stub func(context.Context, int, int, int) ([]model.Commit, error)) {
	fake.listByRepoIDMutex.Lock()
	defer fake.listByRepoIDMutex.Unlock()
	fake.ListByRepoIDStub = stub
}

func (fake *FakeIRepositoryCommit) ListByRepoIDArgsForCall(i int) (context.Context, int, int, int) {
	fake.listByRepoIDMutex.RLock()
	defer fake.listByRepoIDMutex.RUnlock()
	argsForCall := fake.listByRepoIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeIRepositoryCommit) ListByRepoIDReturns(result1 []model.Commit, result2 error) {
	fake.listByRepoIDMutex.Lock()
	defer fake.listByRepoIDMutex.Unlock()
	fake.ListByRepoIDStub = nil
	fake.listByRepoIDReturns = struct {
		result1 []model.Commit
		result2 error
	}{result1, result2}
}

func (fake *FakeIRepositoryCommit) ListByRepoIDReturnsOnCall(i int, result1 []model.Commit, result2 error) {
	fake.listByRepoIDMutex.Lock()
	defer fake.listByRepoIDMutex.Unlock()
	fake.ListByRepoIDStub = nil
	if fake.listByRepoIDReturnsOnCall == nil {
		fake.listByRepoIDReturnsOnCall = make(map[int]struct {
			result1 []model.Commit
			result2 error
		})
	}
	fake.listByRepoIDReturnsOnCall[i] = struct {
		result1 []model.Commit
		result2 error
	}{result1, result2}
}

func (fake *FakeIRepositoryCommit) ResetCommitsFrom(arg1 context.Context, arg2 int, arg3 time.Time) error {
	fake.resetCommitsFromMutex.Lock()
	ret, specificReturn := fake.resetCommitsFromReturnsOnCall[len(fake.resetCommitsFromArgsForCall)]
	fake.resetCommitsFromArgsForCall = append(fake.resetCommitsFromArgsForCall, struct {
		arg1 context.Context
		arg2 int
		arg3 time.Time
	}{arg1, arg2, arg3})
	stub := fake.ResetCommitsFromStub
	fakeReturns := fake.resetCommitsFromReturns
	fake.recordInvocation("ResetCommitsFrom", []interface{}{arg1, arg2, arg3})
	fake.resetCommitsFromMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeIRepositoryCommit) ResetCommitsFromCallCount() int {
	fake.resetCommitsFromMutex.RLock()
	defer fake.resetCommitsFromMutex.RUnlock()
	return len(fake.resetCommitsFromArgsForCall)
}

func (fake *FakeIRepositoryCommit) ResetCommitsFromCalls(stub func(context.Context, int, time.Time) error) {
	fake.resetCommitsFromMutex.Lock()
	defer fake.resetCommitsFromMutex.Unlock()
	fake.ResetCommitsFromStub = stub
}

func (fake *FakeIRepositoryCommit) ResetCommitsFromArgsForCall(i int) (context.Context, int, time.Time) {
	fake.resetCommitsFromMutex.RLock()
	defer fake.resetCommitsFromMutex.RUnlock()
	argsForCall := fake.resetCommitsFromArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeIRepositoryCommit) ResetCommitsFromReturns(result1 error) {
	fake.resetCommitsFromMutex.Lock()
	defer fake.resetCommitsFromMutex.Unlock()
	fake.ResetCommitsFromStub = nil
	fake.resetCommitsFromReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIRepositoryCommit) ResetCommitsFromReturnsOnCall(i int, result1 error) {
	fake.resetCommitsFromMutex.Lock()
	defer fake.resetCommitsFromMutex.Unlock()
	fake.ResetCommitsFromStub = nil
	if fake.resetCommitsFromReturnsOnCall == nil {
		fake.resetCommitsFromReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetCommitsFromReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeIRepositoryCommit) TopAuthors(arg1 context.Context, arg2 int) ([]model.TopAuthor, error) {
	fake.topAuthorsMutex.Lock()
	ret, specificReturn := fake.topAuthorsReturnsOnCall[len(fake.topAuthorsArgsForCall)]
	fake.topAuthorsArgsForCall = append(fake.topAuthorsArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.TopAuthorsStub
	fakeReturns := fake.topAuthorsReturns
	fake.recordInvocation("TopAuthors", []interface{}{arg1, arg2})
	fake.topAuthorsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeIRepositoryCommit) TopAuthorsCallCount() int {
	fake.topAuthorsMutex.RLock()
	defer fake.topAuthorsMutex.RUnlock()
	return len(fake.topAuthorsArgsForCall)
}

func (fake *FakeIRepositoryCommit) TopAuthorsCalls(stub func(context.Context, int) ([]model.TopAuthor, error)) {
	fake.topAuthorsMutex.Lock()
	defer fake.topAuthorsMutex.Unlock()
	fake.TopAuthorsStub = stub
}

func (fake *FakeIRepositoryCommit) TopAuthorsArgsForCall(i int) (context.Context, int) {
	fake.topAuthorsMutex.RLock()
	defer fake.topAuthorsMutex.RUnlock()
	argsForCall := fake.topAuthorsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeIRepositoryCommit) TopAuthorsReturns(result1 []model.TopAuthor, result2 error) {
	fake.topAuthorsMutex.Lock()
	defer fake.topAuthorsMutex.Unlock()
	fake.TopAuthorsStub = nil
	fake.topAuthorsReturns = struct {
		result1 []model.TopAuthor
		result2 error
	}{result1, result2}
}

func (fake *FakeIRepositoryCommit) TopAuthorsReturnsOnCall(i int, result1 []model.TopAuthor, result2 error) {
	fake.topAuthorsMutex.Lock()
	defer fake.topAuthorsMutex.Unlock()
	fake.TopAuthorsStub = nil
	if fake.topAuthorsReturnsOnCall == nil {
		fake.topAuthorsReturnsOnCall = make(map[int]struct {
			result1 []model.TopAuthor
			result2 error
		})
	}
	fake.topAuthorsReturnsOnCall[i] = struct {
		result1 []model.TopAuthor
		result2 error
	}{result1, result2}
}

func (fake *FakeIRepositoryCommit) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.listByRepoIDMutex.RLock()
	defer fake.listByRepoIDMutex.RUnlock()
	fake.resetCommitsFromMutex.RLock()
	defer fake.resetCommitsFromMutex.RUnlock()
	fake.topAuthorsMutex.RLock()
	defer fake.topAuthorsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIRepositoryCommit) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repositories.IRepositoryCommit = new(FakeIRepositoryCommit)
